{"version":3,"sources":["Utils/Color.ts","Utils/RTKQuery/index.ts","Configuration/Global.ts","Utils/assert.ts","Utils/RTKQuery/loginApi.ts","Login/Slice/loginSlice.ts","Utils/RTKQuery/taskApi.ts","TodoList/Slice/taskSlice.ts","Utils/store.ts","TodoList/Component/addTask.tsx","Svg/red-x.svg","Configuration/routes.ts","Signup/Component/signup.tsx","TodoList/Component/todo.tsx","Login/Component/login.tsx","ColorModeSwitcher.tsx","UniversalComponent/Header/header.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["Color","bg","useColorModeValue","color","heading","todoSplitApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","getState","token","login","localStorage","getItem","set","entityTypes","endpoints","todoApi","assert","condition","msg","Error","loginApi","injectEndpoints","build","mutation","query","body","url","method","invalidates","signup","userDetail","initialState","createEntityAdapter","selectId","user","_id","name","email","loginSlice","createSlice","reducers","logout","state","setItem","extraReducers","builder","addMatcher","matchFulfilled","payload","result","matchRejected","actions","selectCurrentUser","activeToken","getToken","taskApi","getTask","addTask","updateTask","deleteTask","taskSlice","count","data","push","index","findIndex","console","log","allTasks","task","store","options","configureStore","reducer","middleware","getDefaultMiddleware","concat","createStore","useTypedSelector","useSelector","AddTask","toast","useToast","useMutation","isLoading","useState","description","formState","setFormState","p","base","md","fontSize","id","mt","type","value","onChange","target","prev","colorScheme","mx","onClick","then","error","title","status","duration","isClosable","_extends","Object","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","fillRule","clipRule","fill","d","SvgRedX","_ref","svgRef","titleId","props","xmlns","xmlnsXlink","width","height","viewBox","enableBackground","xmlSpace","ref","ForwardRef","FreeRoute","path","exact","component","useHistory","password","age","handleChange","textAlign","templateColumns","gap","w","sm","shadow","px","py","useEffect","colSpan","spacing","map","size","completed","cursor","to","ColorModeSwitcher","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","variant","marginLeft","icon","aria-label","Header","dispatch","useDispatch","justifySelf","createBrowserHistory","App","fallback","routes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c9c40cd4.chunk.js","sourcesContent":["import { useColorModeValue } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst Color = () => {\n    const bg = useColorModeValue(\"white\", \"black\");\n    const color = useColorModeValue(\"black\", \"white\");\n    const heading = useColorModeValue(\"teal.600\", \"teal.100\");\n\n    return{\n        bg,\n        color,\n        heading\n    }\n}\n\nexport default Color;","import {ApiWithInjectedEndpoints, createApi, fetchBaseQuery} from \"@rtk-incubator/rtk-query\";\nimport { TODOAPP_API } from \"../../Configuration/Global\";\nimport { RootState } from \"../store\";\n\nexport const todoSplitApi = createApi({\n    reducerPath: \"todoApi\",\n    baseQuery: fetchBaseQuery({\n        baseUrl: TODOAPP_API, \n        prepareHeaders: (headers, {getState}) => {\n            const token = (getState() as RootState).login.token === \"\" ? localStorage.getItem(\"token\"): (getState() as RootState).login.token;\n            if (token) {\n                headers.set(\"Authorization\", `Bearer ${token}`);\n              }\n              return headers;\n        }\n    }),\n    entityTypes: [\"TODO\"],\n    endpoints: () => ({})\n})\n\nexport const todoApi = todoSplitApi as ApiWithInjectedEndpoints<\ntypeof todoSplitApi,\n[\n    typeof import(\"./loginApi\").loginApi\n]\n>","export const TODOAPP_API = \"https://api-nodejs-todolist.herokuapp.com\";","export function assert(condition: any, msg = 'Generic Assertion'): asserts condition {\n    if (!condition) {\n      throw new Error(`Assertion failed: ${msg}`);\n    }\n  }","import { LoginSuccessState, LoginState, UserRegistration, User } from \"../../Login/State/state\";\nimport { todoSplitApi } from \"../../Utils/RTKQuery\";\n\nexport const loginApi = todoSplitApi.injectEndpoints({\n    endpoints: (build) => ({\n        login: build.mutation<LoginSuccessState, Partial<LoginState>>({\n            query:(body) => ({\n                url: \"/user/login\",\n                method: \"POST\",\n                body: body\n            }),\n            invalidates: [\"TODO\"]\n        }),\n        signup: build.mutation<LoginSuccessState, Partial<UserRegistration>>({\n            query: (body) => ({\n                url: \"/user/register\",\n                method: \"POST\",\n                body: body\n            })\n        }),\n        userDetail: build.mutation<User, void>({\n            query: () => ({\n                url: \"/user/me\"\n            })\n        })\n    })\n})\n\n// export const { useLoginMutation, useSignupMutation, useUserDetailQuery } = loginApi;","import { createEntityAdapter, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { stat } from 'fs';\nimport { isEmpty, isNil } from 'rambda';\nimport { assert } from '../../Utils/assert';\nimport { todoApi } from '../../Utils/RTKQuery';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { RootState } from '../../Utils/store';\nimport { LoginState, LoginSuccessState } from '../State/state';\n\nexport const loginAdapter = createEntityAdapter<LoginSuccessState>({\n    selectId: (login) => login.user._id,\n})\n\nexport const getToken =() => {\n    let token = localStorage.getItem(\"token\");\n    if(token && token !== \"SIGNOUT\"){\n        return token\n    }\n    else{\n        return \"SIGNOUT\"\n    }\n}\n\ntype SliceState = { state: 'loading'} | {state: 'finished', data: string};\n\nconst initialState: LoginSuccessState = {token: \"\", user: {name: \"\", email: \"\", _id: 0}}\n\nconst loginSlice = createSlice({\n    name: \"login\",\n    initialState,\n    reducers: {\n        logout(state){\n            state.token = \"SIGNOUT\";\n            state.user = initialState.user;\n            localStorage.setItem(\"token\", \"SIGNOUT\");\n        }\n    },\n    extraReducers: (builder) => {     \n        builder\n        .addMatcher(\n            loginApi.endpoints.login.matchFulfilled,\n            (state, {payload}) => {\n                state.token = payload.result.token;\n                state.user = payload.result.user;\n                localStorage.setItem(\"token\", payload.result.token);\n            }\n        )\n        .addMatcher(\n            loginApi.endpoints.login.matchRejected,\n            (state, {payload}) => {\n                state = initialState\n            }\n        )\n        .addMatcher(\n            loginApi.endpoints.userDetail.matchFulfilled,\n            (state, {payload}) => {\n                state.user = payload.result\n            }\n        )\n    }\n})\n\nexport const { logout } = loginSlice.actions;\n\nexport default loginSlice.reducer;\nexport const selectCurrentUser = (state: RootState) => state.login.user;\nexport const activeToken = (state: RootState) => state.login.token !== \"\" ? state.login.token : getToken();","import { todoApi } from \".\";\nimport { AddTaskState, Task, TaskData, TaskSuccess } from \"../../TodoList/Slice/state\";\n\nexport const taskApi= todoApi.injectEndpoints({\n    endpoints:(build) => ({\n        getTask: build.mutation<Task, void>({\n            query: () => ({\n                url: \"/task\"\n            })\n        }),\n        addTask: build.mutation<TaskSuccess, AddTaskState>({\n            query: (body) => ({\n                url: \"/task\",\n                method: \"POST\",\n                body\n            })\n        }),\n        updateTask: build.mutation<TaskSuccess, Partial<TaskData>>({\n            query: ({_id, ...body}) => ({\n                url: `/task/${_id}`,\n                method: \"PUT\",\n                body\n            })\n        }),\n        deleteTask: build.mutation<TaskSuccess, Partial<TaskData>>({\n            query: ({_id}) => ({\n                url: `/task/${_id}`,\n                method: \"DELETE\"\n            })\n        })\n    })\n})","import { createEntityAdapter, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { taskApi } from '../../Utils/RTKQuery/taskApi';\nimport { RootState } from '../../Utils/store';\nimport { Task, TaskData, TaskSuccess } from './state';\n\n// export const taskAdapter = createEntityAdapter<TaskSuccess>({\n//     selectId: (login) => login.data._id,\n// })\n\n\n// type SliceState = { state: 'loading'} | {state: 'finished', data: string};\n\nconst initialState: Task = {count: 0, data: []}\n\nconst taskSlice = createSlice({\n    name: \"login\",\n    initialState,\n    reducers: {\n       \n    },\n    extraReducers: (builder) => {     \n        builder\n        .addMatcher(\n            taskApi.endpoints.getTask.matchFulfilled,\n            (state, {payload}) => {\n                state.data = payload.result.data;\n                state.count = payload.result.count;\n                // console.log(payload, \"fa\")\n            }\n        )\n        .addMatcher(\n            taskApi.endpoints.addTask.matchFulfilled,\n            (state, {payload}) => {\n                state.data.push(payload.result.data)\n            }\n        )\n        .addMatcher(\n            taskApi.endpoints.updateTask.matchFulfilled,\n            (state, {payload}) => {\n                let index = state.data.findIndex((data) => data._id === payload.result.data._id)\n                if(index > -1){\n                    state.data[index] = payload.result.data\n                }\n            }\n        )\n        .addMatcher(\n            taskApi.endpoints.deleteTask.matchFulfilled,\n            (state, {payload}) => {\n                console.log(payload)\n            }\n        )\n    }\n})\n\n\nexport default taskSlice.reducer;\nexport const allTasks = (state: RootState) => state.task.data;\n","import { configureStore, ConfigureStoreOptions, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { todoApi } from './RTKQuery';\nimport login from '../Login/Slice/loginSlice';\nimport task from '../TodoList/Slice/taskSlice';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\n\n// const middleware = [...getDefaultMiddleware<RootState>(), todoApi];\nexport const createStore = (\n    options?: ConfigureStoreOptions[\"preloadedState\"] | undefined\n) =>\n  configureStore({\n    reducer: {\n     [todoApi.reducerPath]: todoApi.reducer,\n     login,\n     task\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(todoApi.middleware),\n    ...options\n  }\n)\n\nexport const store = createStore();\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { useEffect, useState } from 'react';\nimport { Box, Grid, Text, FormLabel, Input, FormControl, Button, GridItem, List, ListIcon, ListItem, useToast, Flex } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport { useHistory } from 'react-router-dom';\nimport Color from '../../Utils/Color';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { activeToken, logout } from '../../Login/Slice/loginSlice';\nimport { useAppDispatch, useTypedSelector } from '../../Utils/store';\nimport { taskApi } from '../../Utils/RTKQuery/taskApi';\nimport { AddTaskState } from '../Slice/state';\n\nexport function AddTask() {\n    const { bg, color, heading } = Color();\n    const token = useTypedSelector(activeToken);\n    const toast = useToast();\n\n    const [addTask, { isLoading }] = taskApi.endpoints.addTask.useMutation();\n\n    const [formState, setFormState] = useState<AddTaskState>({\n        description: \"\"\n    });\n\n    const handleChange = ({\n        target: { name, value }\n    }: React.ChangeEvent<HTMLInputElement>) =>\n        setFormState((prev) => ({ ...prev, [name]: value }));\n\n    const submit = () => {\n        addTask(formState)\n        .then((data) => {\n            if(data.error){\n                toast({\n                    title: \"Failed to Add task\",\n                    status: \"error\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }else{\n                setFormState({description: \"\"});\n                toast({\n                    title: \"Task Added\",\n                    status: \"success\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }\n        })\n    }\n\n    return (\n        <Box p={{base: 5, md: 9}} >\n        <Text fontSize=\"3xl\" color={heading}>Add Task</Text>\n        <Flex>\n        <FormControl id=\"email\" mt=\"4\" >\n            <FormLabel>Task Name</FormLabel>\n            <Input type=\"email\" name=\"description\" value={formState.description} onChange={handleChange} />\n        </FormControl>\n        <Button colorScheme=\"teal\" mt={12} mx={{base: 2, md: 10}} onClick={submit}>{isLoading ? \"...loading\" : \"Add\"}</Button>\n        </Flex>\n    </Box>\n    )\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\",\n  fill: \"#FF4141\",\n  d: \"M61.44,0c33.933,0,61.439,27.507,61.439,61.439 s-27.506,61.439-61.439,61.439C27.507,122.879,0,95.372,0,61.439S27.507,0,61.44,0L61.44,0z M73.451,39.151 c2.75-2.793,7.221-2.805,9.986-0.027c2.764,2.776,2.775,7.292,0.027,10.083L71.4,61.445l12.076,12.249 c2.729,2.77,2.689,7.257-0.08,10.022c-2.773,2.765-7.23,2.758-9.955-0.013L61.446,71.54L49.428,83.728 c-2.75,2.793-7.22,2.805-9.986,0.027c-2.763-2.776-2.776-7.293-0.027-10.084L51.48,61.434L39.403,49.185 c-2.728-2.769-2.689-7.256,0.082-10.022c2.772-2.765,7.229-2.758,9.953,0.013l11.997,12.165L73.451,39.151L73.451,39.151z\"\n}));\n\nfunction SvgRedX(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"25.879px\",\n    height: \"25.879px\",\n    viewBox: \"0 0 122.879 122.879\",\n    enableBackground: \"new 0 0 122.879 122.879\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRedX);\nexport default __webpack_public_path__ + \"static/media/red-x.c277413d.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport { Login } from \"../Login/Component/login\";\nimport { SignUp } from \"../Signup/Component/signup\";\nimport { ToDo } from \"../TodoList/Component/todo\";\n\ninterface RouteState {\n    path: string,\n    exact: boolean,\n    component: any\n}\n\nexport const Route: RouteState[] = [\n  \n]\n\nexport const FreeRoute: RouteState[] = [\n    {\n        path: \"/todoapp/signup\",\n        exact: true,\n        component: SignUp\n    },\n    {\n        path: \"/todoapp/todo\",\n        exact: true,\n        component: ToDo\n    },\n    {\n        path: \"/todoapp\",\n        exact: true,\n        component: Login\n    }\n]","import React, { useState } from 'react';\nimport { Box, Grid, Text, FormLabel, Input, FormControl, Button, useToast } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport Color from '../../Utils/Color';\nimport { todoApi } from '../../Utils/RTKQuery';\nimport { useHistory } from 'react-router-dom';\nimport { assert } from '../../Utils/assert';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { UserRegistration } from '../../Login/State/state';\n// import { useLoginMutation } from '../../Utils/RTKQuery'\n\nexport function SignUp() {\n    const { push } = useHistory();\n    const toast = useToast();\n    const [formState, setFormState] = useState<UserRegistration>({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        age: 0\n      });\n\n    const {bg, color, heading} = Color();\n\n    const handleChange = ({\n        target: { name, value }\n      }: React.ChangeEvent<HTMLInputElement>) =>\n        setFormState((prev) => ({ ...prev, [name]: value }));\n    \n    assert(\n        todoApi.endpoints.login?.useMutation()\n    )\n\n    const [signup, {isLoading}] = loginApi.endpoints.signup.useMutation()\n\n    const submit = () => {\n        signup(formState).then((data) => {\n            if(data.error){\n                toast({\n                    title: \"Failed to Signup\",\n                    status: \"error\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }else{\n                push(\"/todoapp\")\n            }\n        })\n    }  \n\n    return (\n        <Box textAlign=\"center\" fontSize=\"xl\">\n            <Grid templateColumns=\"repeat(1, 1fr)\" gap={5}>\n                <Box w={{sm: \"98%\", md: \"50%\"}} bg={bg} shadow=\"md\" px={{base: 10, md: 20}} py={10} mx=\"auto\" mt=\"10%\">\n                    <Text fontSize=\"3xl\" color={heading}>SignUp</Text>\n                    <FormControl id=\"name\" mt=\"4\" >\n                        <FormLabel>Name</FormLabel>\n                         <Input type=\"text\" name=\"name\" value={formState.name} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"email\" mt=\"4\" >\n                        <FormLabel>Email address</FormLabel>\n                        <Input type=\"email\" name=\"email\" value={formState.email} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"password\" mt=\"5\">\n                        <FormLabel>Password</FormLabel>\n                        <Input type=\"password\" name=\"password\" value={formState.password} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"age\" mt=\"4\" >\n                        <FormLabel>Age</FormLabel>\n                        <Input type=\"number\" name=\"age\" value={formState.age} onChange={handleChange}/>\n                    </FormControl>\n                    <Button colorScheme=\"teal\" mt={10} onClick={submit}>Sign Up</Button>\n                </Box>\n            </Grid>\n        </Box>\n    )\n}\n\n","import React, { useEffect } from 'react';\nimport { Box, Grid, Text, Button, GridItem, List, ListItem, Flex, Spacer } from '@chakra-ui/react';\nimport Color from '../../Utils/Color';\nimport { activeToken } from '../../Login/Slice/loginSlice';\nimport { useTypedSelector } from '../../Utils/store';\nimport { taskApi } from '../../Utils/RTKQuery/taskApi';\nimport { AddTask } from './addTask';\nimport { allTasks } from '../Slice/taskSlice';\nimport { ReactComponent as DeleteIcon } from '../../Svg/red-x.svg';\n\nexport function ToDo() {\n    const { bg, color, heading } = Color();\n    const token = useTypedSelector(activeToken)\n    const task = useTypedSelector(allTasks);\n    const [getTask, { isLoading }] = taskApi.endpoints.getTask.useMutation();\n    const [updateTask, {isLoading: isUpdating}] = taskApi.endpoints.updateTask.useMutation();\n    const [deleteTask] = taskApi.endpoints.deleteTask.useMutation();\n\n    useEffect(() => {\n        getTask();\n    }, [token])\n\n    const update = (_id: string, completed: boolean) => {\n        updateTask({_id, completed})\n    }\n\n    const removeTask = (_id: string) => {\n        deleteTask({_id}).then(() => getTask())\n    }\n\n    return (\n        <Box fontSize=\"xl\">\n            <Box fontSize=\"m\">\n                    <AddTask />\n                <Grid templateColumns=\"repeat(5, 1fr)\" >\n                <GridItem colSpan={{base: 5, md: 3}} p={9}>\n                        <List spacing={3}>\n                            {task.map((task, i) => \n                                <ListItem key={i}>\n                                    <Flex>\n                                        {/* <i className=\"fa fa-pencil\" style={{color: color, margin: \"1% 3%\", fontSize: \"18px\"}}></i> */}\n                                        <Text>{task.description}</Text>\n                                        <Spacer />\n                                        <Button colorScheme=\"teal\" size=\"xs\"  onClick={() => update(task._id, !task.completed)}>{task.completed ? \"Completed\" : \"Complete\"}</Button>\n                                        <Box px={2} onClick={() => removeTask(task._id)} cursor=\"pointer\"><DeleteIcon/></Box>\n                                        </Flex>\n                                </ListItem>\n                            )}\n                        </List>\n                    </GridItem>\n                </Grid>\n            </Box>\n        </Box>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Box, Grid, Text, FormLabel, Input, FormControl, Button, useToast } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport Color from '../../Utils/Color';\nimport { todoApi } from '../../Utils/RTKQuery';\nimport { LoginState } from '../State/state';\nimport { Link, useHistory } from 'react-router-dom';\nimport { assert } from '../../Utils/assert';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { useTypedSelector } from '../../Utils/store';\nimport { activeToken } from '../Slice/loginSlice';\n\nexport function Login() {\n    const { push } = useHistory();\n    const toast = useToast();\n    const token = useTypedSelector(activeToken)\n    const [formState, setFormState] = useState<LoginState>({\n        email: \"\",\n        password: \"\"\n      });\n\n    const {bg, color, heading} = Color();\n\n    useEffect(() => {\n        if(token !== \"SIGNOUT\"){\n            push(\"/todoapp/todo\")\n        }\n    }, [token])\n\n    const handleChange = ({\n        target: { name, value }\n      }: React.ChangeEvent<HTMLInputElement>) =>\n        setFormState((prev) => ({ ...prev, [name]: value }));\n    \n    assert(\n        todoApi.endpoints.login?.useMutation()\n    )\n\n    const [login, {isLoading}] = loginApi.endpoints.login.useMutation()\n    console.log(token)\n    const submit = () => {\n        login(formState)\n        .then((data) =>{\n            if(data.error){\n                toast({\n                    title: \"Failed to Authenticate\",\n                    description: \"Incorrect email and password\",\n                    status: \"error\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }else{\n                push(\"/todoapp/todo\")\n            }\n            }\n        )\n    }  \n\n    return (\n        <Box textAlign=\"center\" fontSize=\"xl\">\n            <Grid templateColumns=\"repeat(1, 1fr)\" gap={9}>\n                <Box w={{sm: \"95%\", md: \"50%\"}} bg={bg} shadow=\"md\" px={{base: 5, md: 20}} py={10} mx=\"auto\" mt=\"10%\">\n                    <Text fontSize=\"3xl\" color={heading}>Login</Text>\n                    <FormControl id=\"email\" mt=\"4\" >\n                        <FormLabel>Email address</FormLabel>\n                        <Input type=\"email\" name=\"email\" value={formState.email} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"password\" mt=\"5\">\n                        <FormLabel>Password</FormLabel>\n                        <Input type=\"password\" name=\"password\" value={formState.password} onChange={handleChange}/>\n                    </FormControl>\n                    <Button colorScheme=\"teal\" mt={10} onClick={submit}>{isLoading ? \"...loading\": \"Login\"}</Button>\n                    <Text><Link to=\"/todoapp/signup\">Sign Up</Link></Text>\n                </Box>\n            </Grid>\n        </Box>\n    )\n}\n\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import React, { useEffect } from 'react';\nimport { Box, Text, Button, HStack, Spacer } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport { useHistory } from 'react-router-dom';\nimport Color from '../../Utils/Color';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { activeToken, logout, selectCurrentUser } from '../../Login/Slice/loginSlice';\nimport { useAppDispatch, useTypedSelector } from '../../Utils/store';\n\nexport function Header() {\n    const {bg, color, heading} = Color();\n    const { push } = useHistory();\n    const dispatch = useAppDispatch();\n    const token = useTypedSelector(activeToken)\n    // const user: User = details;\n    const user = useTypedSelector(selectCurrentUser);\n\n    // console.log(userName, \"h\")\n    const [userDetail, {isLoading}] = loginApi.endpoints.userDetail.useMutation();\n   useEffect(()=> {\n    token !== \"SIGNOUT\" &&  userDetail()\n   }, [token])\n    const signOut = () => {\n        dispatch(logout())\n        push('/todoapp')\n    }\n\n    return (\n        <Box bg={bg} p={2}>\n            <HStack>\n            <Spacer/><ColorModeSwitcher justifySelf=\"flex-end\" />\n            <Text mx={4}>{user.name}</Text>\n            {token !== \"SIGNOUT\" && <Button colorScheme=\"teal\" onClick={signOut} size=\"sm\">Sign out</Button>}\n             </HStack>\n        </Box>\n    )\n}\n","import * as React from \"react\"\nimport { BrowserRouter, Route, Router, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\nimport { FreeRoute } from \"./Configuration/routes\";\nimport { Header } from \"./UniversalComponent/Header/header\";\n\nlet history = createBrowserHistory();\n\nexport const App = () => (\n  <BrowserRouter>\n    <React.Suspense fallback=\"...Loading\">\n      <Route path=\"*\" component={Header} />\n      <Switch>\n        {FreeRoute.map((routes, i) =>\n          <Route key={i} exact={routes.exact} path={routes.path} component={routes.component} />\n        )}\n      </Switch>\n    </React.Suspense>\n  </BrowserRouter>\n)\n\n\n// {/* <ChakraProvider theme={theme}>\n//     <Box textAlign=\"center\" fontSize=\"xl\">\n//       <Grid minH=\"100vh\" p={3}>\n//         <ColorModeSwitcher justifySelf=\"flex-end\" />\n//         <VStack spacing={8}>\n//           <Logo h=\"40vmin\" pointerEvents=\"none\" />\n//           <Text>\n//             Edit <Code fontSize=\"xl\">src/App.tsx</Code> and save to reload.\n//           </Text>\n//           <Link\n//             color=\"teal.500\"\n//             href=\"https://chakra-ui.com\"\n//             fontSize=\"2xl\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn Chakra\n//           </Link>\n//         </VStack>\n//       </Grid>\n//     </Box>\n//   </ChakraProvider> */}","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {\n  ChakraProvider,\n  theme,\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Utils/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ColorModeScript />\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}