[{"C:\\Users\\Anamika\\Desktop\\todo\\src\\index.tsx":"1","C:\\Users\\Anamika\\Desktop\\todo\\src\\reportWebVitals.ts":"2","C:\\Users\\Anamika\\Desktop\\todo\\src\\serviceWorker.ts":"3","C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\store.ts":"4","C:\\Users\\Anamika\\Desktop\\todo\\src\\App.tsx":"5","C:\\Users\\Anamika\\Desktop\\todo\\src\\Login\\Slice\\loginSlice.ts":"6","C:\\Users\\Anamika\\Desktop\\todo\\src\\TodoList\\Slice\\taskSlice.ts":"7","C:\\Users\\Anamika\\Desktop\\todo\\src\\Configuration\\routes.ts":"8","C:\\Users\\Anamika\\Desktop\\todo\\src\\UniversalComponent\\Header\\header.tsx":"9","C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\RTKQuery\\index.ts":"10","C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\RTKQuery\\loginApi.ts":"11","C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\RTKQuery\\taskApi.ts":"12","C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\Color.ts":"13","C:\\Users\\Anamika\\Desktop\\todo\\src\\Login\\Component\\login.tsx":"14","C:\\Users\\Anamika\\Desktop\\todo\\src\\TodoList\\Component\\todo.tsx":"15","C:\\Users\\Anamika\\Desktop\\todo\\src\\Signup\\Component\\signup.tsx":"16","C:\\Users\\Anamika\\Desktop\\todo\\src\\ColorModeSwitcher.tsx":"17","C:\\Users\\Anamika\\Desktop\\todo\\src\\Configuration\\Global.ts":"18","C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\assert.ts":"19","C:\\Users\\Anamika\\Desktop\\todo\\src\\TodoList\\Component\\addTask.tsx":"20"},{"size":1148,"mtime":1607328746000,"results":"21","hashOfConfig":"22"},{"size":416,"mtime":1606981499000,"results":"23","hashOfConfig":"22"},{"size":5258,"mtime":1606981499000,"results":"24","hashOfConfig":"22"},{"size":993,"mtime":1607436222000,"results":"25","hashOfConfig":"22"},{"size":1385,"mtime":1607505134200,"results":"26","hashOfConfig":"22"},{"size":2128,"mtime":1607497091484,"results":"27","hashOfConfig":"22"},{"size":1742,"mtime":1607487351000,"results":"28","hashOfConfig":"22"},{"size":616,"mtime":1607503578231,"results":"29","hashOfConfig":"22"},{"size":1363,"mtime":1607503610138,"results":"30","hashOfConfig":"22"},{"size":859,"mtime":1607431220000,"results":"31","hashOfConfig":"22"},{"size":964,"mtime":1607430611000,"results":"32","hashOfConfig":"22"},{"size":961,"mtime":1607444176000,"results":"33","hashOfConfig":"22"},{"size":360,"mtime":1607079883000,"results":"34","hashOfConfig":"22"},{"size":2923,"mtime":1607503598869,"results":"35","hashOfConfig":"22"},{"size":2397,"mtime":1607491811000,"results":"36","hashOfConfig":"22"},{"size":3020,"mtime":1607503604670,"results":"37","hashOfConfig":"22"},{"size":743,"mtime":1606981499000,"results":"38","hashOfConfig":"22"},{"size":71,"mtime":1607321739000,"results":"39","hashOfConfig":"22"},{"size":169,"mtime":1607337427000,"results":"40","hashOfConfig":"22"},{"size":2254,"mtime":1607491891000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"1b0urxo",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},"C:\\Users\\Anamika\\Desktop\\todo\\src\\index.tsx",["96"],"import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {\n  ChakraProvider,\n  theme,\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Utils/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ColorModeScript />\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n",["97","98"],"C:\\Users\\Anamika\\Desktop\\todo\\src\\reportWebVitals.ts",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\serviceWorker.ts",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\store.ts",["99"],"import { configureStore, ConfigureStoreOptions, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { todoApi } from './RTKQuery';\nimport login from '../Login/Slice/loginSlice';\nimport task from '../TodoList/Slice/taskSlice';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\n\n// const middleware = [...getDefaultMiddleware<RootState>(), todoApi];\nexport const createStore = (\n    options?: ConfigureStoreOptions[\"preloadedState\"] | undefined\n) =>\n  configureStore({\n    reducer: {\n     [todoApi.reducerPath]: todoApi.reducer,\n     login,\n     task\n    },\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(todoApi.middleware),\n    ...options\n  }\n)\n\nexport const store = createStore();\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","C:\\Users\\Anamika\\Desktop\\todo\\src\\App.tsx",["100","101","102"],"import * as React from \"react\"\nimport { BrowserRouter, HashRouter, Route, Router, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\nimport { FreeRoute } from \"./Configuration/routes\";\nimport { Header } from \"./UniversalComponent/Header/header\";\n\nlet history = createBrowserHistory();\n\nexport const App = () => (\n  <HashRouter>\n    <React.Suspense fallback=\"...Loading\">\n      <Route path=\"*\" component={Header} />\n      <Switch>\n        {FreeRoute.map((routes, i) =>\n          <Route key={i} exact={routes.exact} path={routes.path} component={routes.component} />\n        )}\n      </Switch>\n    </React.Suspense>\n  </HashRouter>\n)\n\n\n// {/* <ChakraProvider theme={theme}>\n//     <Box textAlign=\"center\" fontSize=\"xl\">\n//       <Grid minH=\"100vh\" p={3}>\n//         <ColorModeSwitcher justifySelf=\"flex-end\" />\n//         <VStack spacing={8}>\n//           <Logo h=\"40vmin\" pointerEvents=\"none\" />\n//           <Text>\n//             Edit <Code fontSize=\"xl\">src/App.tsx</Code> and save to reload.\n//           </Text>\n//           <Link\n//             color=\"teal.500\"\n//             href=\"https://chakra-ui.com\"\n//             fontSize=\"2xl\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn Chakra\n//           </Link>\n//         </VStack>\n//       </Grid>\n//     </Box>\n//   </ChakraProvider> */}","C:\\Users\\Anamika\\Desktop\\todo\\src\\Login\\Slice\\loginSlice.ts",["103","104","105","106","107","108","109","110"],"import { createEntityAdapter, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { stat } from 'fs';\nimport { isEmpty, isNil } from 'rambda';\nimport { assert } from '../../Utils/assert';\nimport { todoApi } from '../../Utils/RTKQuery';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { RootState } from '../../Utils/store';\nimport { LoginState, LoginSuccessState } from '../State/state';\n\nexport const loginAdapter = createEntityAdapter<LoginSuccessState>({\n    selectId: (login) => login.user._id,\n})\n\nexport const getToken =() => {\n    let token = localStorage.getItem(\"token\");\n    if(token && token !== \"SIGNOUT\"){\n        return token\n    }\n    else{\n        return \"SIGNOUT\"\n    }\n}\n\ntype SliceState = { state: 'loading'} | {state: 'finished', data: string};\n\nconst initialState: LoginSuccessState = {token: \"\", user: {name: \"\", email: \"\", _id: 0}}\n\nconst loginSlice = createSlice({\n    name: \"login\",\n    initialState,\n    reducers: {\n        logout(state){\n            state.token = \"SIGNOUT\";\n            state.user = initialState.user;\n            localStorage.setItem(\"token\", \"SIGNOUT\");\n        }\n    },\n    extraReducers: (builder) => {     \n        builder\n        .addMatcher(\n            loginApi.endpoints.login.matchFulfilled,\n            (state, {payload}) => {\n                state.token = payload.result.token;\n                state.user = payload.result.user;\n                localStorage.setItem(\"token\", payload.result.token);\n            }\n        )\n        .addMatcher(\n            loginApi.endpoints.login.matchRejected,\n            (state, {payload}) => {\n                state = initialState\n            }\n        )\n        .addMatcher(\n            loginApi.endpoints.userDetail.matchFulfilled,\n            (state, {payload}) => {\n                state.user = payload.result\n            }\n        )\n    }\n})\n\nexport const { logout } = loginSlice.actions;\n\nexport default loginSlice.reducer;\nexport const selectCurrentUser = (state: RootState) => state.login.user;\nexport const activeToken = (state: RootState) => state.login.token !== \"\" ? state.login.token : getToken();","C:\\Users\\Anamika\\Desktop\\todo\\src\\TodoList\\Slice\\taskSlice.ts",["111","112","113","114"],"import { createEntityAdapter, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { taskApi } from '../../Utils/RTKQuery/taskApi';\nimport { RootState } from '../../Utils/store';\nimport { Task, TaskData, TaskSuccess } from './state';\n\n// export const taskAdapter = createEntityAdapter<TaskSuccess>({\n//     selectId: (login) => login.data._id,\n// })\n\n\n// type SliceState = { state: 'loading'} | {state: 'finished', data: string};\n\nconst initialState: Task = {count: 0, data: []}\n\nconst taskSlice = createSlice({\n    name: \"login\",\n    initialState,\n    reducers: {\n       \n    },\n    extraReducers: (builder) => {     \n        builder\n        .addMatcher(\n            taskApi.endpoints.getTask.matchFulfilled,\n            (state, {payload}) => {\n                state.data = payload.result.data;\n                state.count = payload.result.count;\n                // console.log(payload, \"fa\")\n            }\n        )\n        .addMatcher(\n            taskApi.endpoints.addTask.matchFulfilled,\n            (state, {payload}) => {\n                state.data.push(payload.result.data)\n            }\n        )\n        .addMatcher(\n            taskApi.endpoints.updateTask.matchFulfilled,\n            (state, {payload}) => {\n                let index = state.data.findIndex((data) => data._id === payload.result.data._id)\n                if(index > -1){\n                    state.data[index] = payload.result.data\n                }\n            }\n        )\n        .addMatcher(\n            taskApi.endpoints.deleteTask.matchFulfilled,\n            (state, {payload}) => {\n                console.log(payload)\n            }\n        )\n    }\n})\n\n\nexport default taskSlice.reducer;\nexport const allTasks = (state: RootState) => state.task.data;\n","C:\\Users\\Anamika\\Desktop\\todo\\src\\Configuration\\routes.ts",["115"],"import React from \"react\";\nimport { Login } from \"../Login/Component/login\";\nimport { SignUp } from \"../Signup/Component/signup\";\nimport { ToDo } from \"../TodoList/Component/todo\";\n\ninterface RouteState {\n    path: string,\n    exact: boolean,\n    component: any\n}\n\nexport const Route: RouteState[] = [\n  \n]\n\nexport const FreeRoute: RouteState[] = [\n    {\n        path: \"/todoapp/signup\",\n        exact: true,\n        component: SignUp\n    },\n    {\n        path: \"/todoapp/todo\",\n        exact: true,\n        component: ToDo\n    },\n    {\n        path: \"/todoapp\",\n        exact: true,\n        component: Login\n    }\n]","C:\\Users\\Anamika\\Desktop\\todo\\src\\UniversalComponent\\Header\\header.tsx",["116","117","118","119"],"import React, { useEffect } from 'react';\nimport { Box, Text, Button, HStack, Spacer } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport { useHistory } from 'react-router-dom';\nimport Color from '../../Utils/Color';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { activeToken, logout, selectCurrentUser } from '../../Login/Slice/loginSlice';\nimport { useAppDispatch, useTypedSelector } from '../../Utils/store';\n\nexport function Header() {\n    const {bg, color, heading} = Color();\n    const { push } = useHistory();\n    const dispatch = useAppDispatch();\n    const token = useTypedSelector(activeToken)\n    // const user: User = details;\n    const user = useTypedSelector(selectCurrentUser);\n\n    // console.log(userName, \"h\")\n    const [userDetail, {isLoading}] = loginApi.endpoints.userDetail.useMutation();\n   useEffect(()=> {\n    token !== \"SIGNOUT\" &&  userDetail()\n   }, [token])\n    const signOut = () => {\n        dispatch(logout())\n        push('/todoapp')\n    }\n\n    return (\n        <Box bg={bg} p={2}>\n            <HStack>\n            <Spacer/><ColorModeSwitcher justifySelf=\"flex-end\" />\n            <Text mx={4}>{user.name}</Text>\n            {token !== \"SIGNOUT\" && <Button colorScheme=\"teal\" onClick={signOut} size=\"sm\">Sign out</Button>}\n             </HStack>\n        </Box>\n    )\n}\n","C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\RTKQuery\\index.ts",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\RTKQuery\\loginApi.ts",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\RTKQuery\\taskApi.ts",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\Color.ts",["120"],"import { useColorModeValue } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst Color = () => {\n    const bg = useColorModeValue(\"white\", \"black\");\n    const color = useColorModeValue(\"black\", \"white\");\n    const heading = useColorModeValue(\"teal.600\", \"teal.100\");\n\n    return{\n        bg,\n        color,\n        heading\n    }\n}\n\nexport default Color;","C:\\Users\\Anamika\\Desktop\\todo\\src\\Login\\Component\\login.tsx",["121","122","123"],"import React, { useEffect, useState } from 'react';\nimport { Box, Grid, Text, FormLabel, Input, FormControl, Button, useToast } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport Color from '../../Utils/Color';\nimport { todoApi } from '../../Utils/RTKQuery';\nimport { LoginState } from '../State/state';\nimport { Link, useHistory } from 'react-router-dom';\nimport { assert } from '../../Utils/assert';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { useTypedSelector } from '../../Utils/store';\nimport { activeToken } from '../Slice/loginSlice';\n\nexport function Login() {\n    const { push } = useHistory();\n    const toast = useToast();\n    const token = useTypedSelector(activeToken)\n    const [formState, setFormState] = useState<LoginState>({\n        email: \"\",\n        password: \"\"\n      });\n\n    const {bg, color, heading} = Color();\n\n    useEffect(() => {\n        if(token !== \"SIGNOUT\"){\n            push(\"/todoapp/todo\")\n        }\n    }, [token])\n\n    const handleChange = ({\n        target: { name, value }\n      }: React.ChangeEvent<HTMLInputElement>) =>\n        setFormState((prev) => ({ ...prev, [name]: value }));\n    \n    assert(\n        todoApi.endpoints.login?.useMutation()\n    )\n\n    const [login, {isLoading}] = loginApi.endpoints.login.useMutation()\n    console.log(token)\n    const submit = () => {\n        login(formState)\n        .then((data) =>{\n            if(data.error){\n                toast({\n                    title: \"Failed to Authenticate\",\n                    description: \"Incorrect email and password\",\n                    status: \"error\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }else{\n                push(\"/todoapp/todo\")\n            }\n            }\n        )\n    }  \n\n    return (\n        <Box textAlign=\"center\" fontSize=\"xl\">\n            <Grid templateColumns=\"repeat(1, 1fr)\" gap={9}>\n                <Box w={{sm: \"95%\", md: \"50%\"}} bg={bg} shadow=\"md\" px={{base: 5, md: 20}} py={10} mx=\"auto\" mt=\"10%\">\n                    <Text fontSize=\"3xl\" color={heading}>Login</Text>\n                    <FormControl id=\"email\" mt=\"4\" >\n                        <FormLabel>Email address</FormLabel>\n                        <Input type=\"email\" name=\"email\" value={formState.email} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"password\" mt=\"5\">\n                        <FormLabel>Password</FormLabel>\n                        <Input type=\"password\" name=\"password\" value={formState.password} onChange={handleChange}/>\n                    </FormControl>\n                    <Button colorScheme=\"teal\" mt={10} onClick={submit}>{isLoading ? \"...loading\": \"Login\"}</Button>\n                    <Text><Link to=\"/todoapp/signup\">Sign Up</Link></Text>\n                </Box>\n            </Grid>\n        </Box>\n    )\n}\n\n","C:\\Users\\Anamika\\Desktop\\todo\\src\\TodoList\\Component\\todo.tsx",["124","125","126","127","128","129"],"import React, { useEffect } from 'react';\nimport { Box, Grid, Text, Button, GridItem, List, ListItem, Flex, Spacer } from '@chakra-ui/react';\nimport Color from '../../Utils/Color';\nimport { activeToken } from '../../Login/Slice/loginSlice';\nimport { useTypedSelector } from '../../Utils/store';\nimport { taskApi } from '../../Utils/RTKQuery/taskApi';\nimport { AddTask } from './addTask';\nimport { allTasks } from '../Slice/taskSlice';\nimport { ReactComponent as DeleteIcon } from '../../Svg/red-x.svg';\n\nexport function ToDo() {\n    const { bg, color, heading } = Color();\n    const token = useTypedSelector(activeToken)\n    const task = useTypedSelector(allTasks);\n    const [getTask, { isLoading }] = taskApi.endpoints.getTask.useMutation();\n    const [updateTask, {isLoading: isUpdating}] = taskApi.endpoints.updateTask.useMutation();\n    const [deleteTask] = taskApi.endpoints.deleteTask.useMutation();\n\n    useEffect(() => {\n        getTask();\n    }, [token])\n\n    const update = (_id: string, completed: boolean) => {\n        updateTask({_id, completed})\n    }\n\n    const removeTask = (_id: string) => {\n        deleteTask({_id}).then(() => getTask())\n    }\n\n    return (\n        <Box fontSize=\"xl\">\n            <Box fontSize=\"m\">\n                    <AddTask />\n                <Grid templateColumns=\"repeat(5, 1fr)\" >\n                <GridItem colSpan={{base: 5, md: 3}} p={9}>\n                        <List spacing={3}>\n                            {task.map((task, i) => \n                                <ListItem key={i}>\n                                    <Flex>\n                                        {/* <i className=\"fa fa-pencil\" style={{color: color, margin: \"1% 3%\", fontSize: \"18px\"}}></i> */}\n                                        <Text>{task.description}</Text>\n                                        <Spacer />\n                                        <Button colorScheme=\"teal\" size=\"xs\"  onClick={() => update(task._id, !task.completed)}>{task.completed ? \"Completed\" : \"Complete\"}</Button>\n                                        <Box px={2} onClick={() => removeTask(task._id)} cursor=\"pointer\"><DeleteIcon/></Box>\n                                        </Flex>\n                                </ListItem>\n                            )}\n                        </List>\n                    </GridItem>\n                </Grid>\n            </Box>\n        </Box>\n    )\n}\n","C:\\Users\\Anamika\\Desktop\\todo\\src\\Signup\\Component\\signup.tsx",["130","131","132"],"import React, { useState } from 'react';\nimport { Box, Grid, Text, FormLabel, Input, FormControl, Button, useToast } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport Color from '../../Utils/Color';\nimport { todoApi } from '../../Utils/RTKQuery';\nimport { useHistory } from 'react-router-dom';\nimport { assert } from '../../Utils/assert';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { UserRegistration } from '../../Login/State/state';\n// import { useLoginMutation } from '../../Utils/RTKQuery'\n\nexport function SignUp() {\n    const { push } = useHistory();\n    const toast = useToast();\n    const [formState, setFormState] = useState<UserRegistration>({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        age: 0\n      });\n\n    const {bg, color, heading} = Color();\n\n    const handleChange = ({\n        target: { name, value }\n      }: React.ChangeEvent<HTMLInputElement>) =>\n        setFormState((prev) => ({ ...prev, [name]: value }));\n    \n    assert(\n        todoApi.endpoints.login?.useMutation()\n    )\n\n    const [signup, {isLoading}] = loginApi.endpoints.signup.useMutation()\n\n    const submit = () => {\n        signup(formState).then((data) => {\n            if(data.error){\n                toast({\n                    title: \"Failed to Signup\",\n                    status: \"error\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }else{\n                push(\"/todoapp\")\n            }\n        })\n    }  \n\n    return (\n        <Box textAlign=\"center\" fontSize=\"xl\">\n            <Grid templateColumns=\"repeat(1, 1fr)\" gap={5}>\n                <Box w={{sm: \"98%\", md: \"50%\"}} bg={bg} shadow=\"md\" px={{base: 10, md: 20}} py={10} mx=\"auto\" mt=\"10%\">\n                    <Text fontSize=\"3xl\" color={heading}>SignUp</Text>\n                    <FormControl id=\"name\" mt=\"4\" >\n                        <FormLabel>Name</FormLabel>\n                         <Input type=\"text\" name=\"name\" value={formState.name} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"email\" mt=\"4\" >\n                        <FormLabel>Email address</FormLabel>\n                        <Input type=\"email\" name=\"email\" value={formState.email} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"password\" mt=\"5\">\n                        <FormLabel>Password</FormLabel>\n                        <Input type=\"password\" name=\"password\" value={formState.password} onChange={handleChange}/>\n                    </FormControl>\n                    <FormControl id=\"age\" mt=\"4\" >\n                        <FormLabel>Age</FormLabel>\n                        <Input type=\"number\" name=\"age\" value={formState.age} onChange={handleChange}/>\n                    </FormControl>\n                    <Button colorScheme=\"teal\" mt={10} onClick={submit}>Sign Up</Button>\n                </Box>\n            </Grid>\n        </Box>\n    )\n}\n\n","C:\\Users\\Anamika\\Desktop\\todo\\src\\ColorModeSwitcher.tsx",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\Configuration\\Global.ts",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\Utils\\assert.ts",[],"C:\\Users\\Anamika\\Desktop\\todo\\src\\TodoList\\Component\\addTask.tsx",["133","134","135","136","137","138","139","140","141","142","143","144","145","146"],"import React, { useEffect, useState } from 'react';\nimport { Box, Grid, Text, FormLabel, Input, FormControl, Button, GridItem, List, ListIcon, ListItem, useToast, Flex } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\nimport { useHistory } from 'react-router-dom';\nimport Color from '../../Utils/Color';\nimport { loginApi } from '../../Utils/RTKQuery/loginApi';\nimport { activeToken, logout } from '../../Login/Slice/loginSlice';\nimport { useAppDispatch, useTypedSelector } from '../../Utils/store';\nimport { taskApi } from '../../Utils/RTKQuery/taskApi';\nimport { AddTaskState } from '../Slice/state';\n\nexport function AddTask() {\n    const { bg, color, heading } = Color();\n    const token = useTypedSelector(activeToken);\n    const toast = useToast();\n\n    const [addTask, { isLoading }] = taskApi.endpoints.addTask.useMutation();\n\n    const [formState, setFormState] = useState<AddTaskState>({\n        description: \"\"\n    });\n\n    const handleChange = ({\n        target: { name, value }\n    }: React.ChangeEvent<HTMLInputElement>) =>\n        setFormState((prev) => ({ ...prev, [name]: value }));\n\n    const submit = () => {\n        addTask(formState)\n        .then((data) => {\n            if(data.error){\n                toast({\n                    title: \"Failed to Add task\",\n                    status: \"error\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }else{\n                setFormState({description: \"\"});\n                toast({\n                    title: \"Task Added\",\n                    status: \"success\",\n                    duration: 3000,\n                    isClosable: true,\n                  })\n            }\n        })\n    }\n\n    return (\n        <Box p={{base: 5, md: 9}} >\n        <Text fontSize=\"3xl\" color={heading}>Add Task</Text>\n        <Flex>\n        <FormControl id=\"email\" mt=\"4\" >\n            <FormLabel>Task Name</FormLabel>\n            <Input type=\"email\" name=\"description\" value={formState.description} onChange={handleChange} />\n        </FormControl>\n        <Button colorScheme=\"teal\" mt={12} mx={{base: 2, md: 10}} onClick={submit}>{isLoading ? \"...loading\" : \"Add\"}</Button>\n        </Flex>\n    </Box>\n    )\n}\n",["147","148"],{"ruleId":"149","severity":1,"message":"150","line":8,"column":10,"nodeType":"151","messageId":"152","endLine":8,"endColumn":27},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"149","severity":1,"message":"157","line":1,"column":49,"nodeType":"151","messageId":"152","endLine":1,"endColumn":69},{"ruleId":"149","severity":1,"message":"158","line":2,"column":10,"nodeType":"151","messageId":"152","endLine":2,"endColumn":23},{"ruleId":"149","severity":1,"message":"159","line":2,"column":44,"nodeType":"151","messageId":"152","endLine":2,"endColumn":50},{"ruleId":"149","severity":1,"message":"160","line":7,"column":5,"nodeType":"151","messageId":"152","endLine":7,"endColumn":12},{"ruleId":"149","severity":1,"message":"161","line":1,"column":44,"nodeType":"151","messageId":"152","endLine":1,"endColumn":57},{"ruleId":"149","severity":1,"message":"162","line":2,"column":10,"nodeType":"151","messageId":"152","endLine":2,"endColumn":14},{"ruleId":"149","severity":1,"message":"163","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":17},{"ruleId":"149","severity":1,"message":"164","line":3,"column":19,"nodeType":"151","messageId":"152","endLine":3,"endColumn":24},{"ruleId":"149","severity":1,"message":"165","line":4,"column":10,"nodeType":"151","messageId":"152","endLine":4,"endColumn":16},{"ruleId":"149","severity":1,"message":"166","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":17},{"ruleId":"149","severity":1,"message":"167","line":8,"column":10,"nodeType":"151","messageId":"152","endLine":8,"endColumn":20},{"ruleId":"149","severity":1,"message":"168","line":24,"column":6,"nodeType":"151","messageId":"152","endLine":24,"endColumn":16},{"ruleId":"149","severity":1,"message":"169","line":1,"column":10,"nodeType":"151","messageId":"152","endLine":1,"endColumn":29},{"ruleId":"149","severity":1,"message":"161","line":1,"column":44,"nodeType":"151","messageId":"152","endLine":1,"endColumn":57},{"ruleId":"149","severity":1,"message":"170","line":4,"column":16,"nodeType":"151","messageId":"152","endLine":4,"endColumn":24},{"ruleId":"149","severity":1,"message":"171","line":4,"column":26,"nodeType":"151","messageId":"152","endLine":4,"endColumn":37},{"ruleId":"149","severity":1,"message":"172","line":1,"column":8,"nodeType":"151","messageId":"152","endLine":1,"endColumn":13},{"ruleId":"149","severity":1,"message":"173","line":11,"column":16,"nodeType":"151","messageId":"152","endLine":11,"endColumn":21},{"ruleId":"149","severity":1,"message":"174","line":11,"column":23,"nodeType":"151","messageId":"152","endLine":11,"endColumn":30},{"ruleId":"149","severity":1,"message":"175","line":19,"column":25,"nodeType":"151","messageId":"152","endLine":19,"endColumn":34},{"ruleId":"176","severity":1,"message":"177","line":22,"column":7,"nodeType":"178","endLine":22,"endColumn":14,"suggestions":"179"},{"ruleId":"149","severity":1,"message":"172","line":2,"column":8,"nodeType":"151","messageId":"152","endLine":2,"endColumn":13},{"ruleId":"149","severity":1,"message":"150","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":27},{"ruleId":"149","severity":1,"message":"173","line":22,"column":16,"nodeType":"151","messageId":"152","endLine":22,"endColumn":21},{"ruleId":"176","severity":1,"message":"180","line":28,"column":8,"nodeType":"178","endLine":28,"endColumn":15,"suggestions":"181"},{"ruleId":"149","severity":1,"message":"182","line":12,"column":13,"nodeType":"151","messageId":"152","endLine":12,"endColumn":15},{"ruleId":"149","severity":1,"message":"173","line":12,"column":17,"nodeType":"151","messageId":"152","endLine":12,"endColumn":22},{"ruleId":"149","severity":1,"message":"174","line":12,"column":24,"nodeType":"151","messageId":"152","endLine":12,"endColumn":31},{"ruleId":"149","severity":1,"message":"175","line":15,"column":23,"nodeType":"151","messageId":"152","endLine":15,"endColumn":32},{"ruleId":"149","severity":1,"message":"183","line":16,"column":36,"nodeType":"151","messageId":"152","endLine":16,"endColumn":46},{"ruleId":"176","severity":1,"message":"184","line":21,"column":8,"nodeType":"178","endLine":21,"endColumn":15,"suggestions":"185"},{"ruleId":"149","severity":1,"message":"150","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":27},{"ruleId":"149","severity":1,"message":"173","line":22,"column":16,"nodeType":"151","messageId":"152","endLine":22,"endColumn":21},{"ruleId":"149","severity":1,"message":"175","line":33,"column":21,"nodeType":"151","messageId":"152","endLine":33,"endColumn":30},{"ruleId":"149","severity":1,"message":"186","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":26},{"ruleId":"149","severity":1,"message":"187","line":2,"column":15,"nodeType":"151","messageId":"152","endLine":2,"endColumn":19},{"ruleId":"149","severity":1,"message":"188","line":2,"column":66,"nodeType":"151","messageId":"152","endLine":2,"endColumn":74},{"ruleId":"149","severity":1,"message":"189","line":2,"column":76,"nodeType":"151","messageId":"152","endLine":2,"endColumn":80},{"ruleId":"149","severity":1,"message":"190","line":2,"column":82,"nodeType":"151","messageId":"152","endLine":2,"endColumn":90},{"ruleId":"149","severity":1,"message":"191","line":2,"column":92,"nodeType":"151","messageId":"152","endLine":2,"endColumn":100},{"ruleId":"149","severity":1,"message":"150","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":27},{"ruleId":"149","severity":1,"message":"192","line":4,"column":10,"nodeType":"151","messageId":"152","endLine":4,"endColumn":20},{"ruleId":"149","severity":1,"message":"193","line":6,"column":10,"nodeType":"151","messageId":"152","endLine":6,"endColumn":18},{"ruleId":"149","severity":1,"message":"194","line":7,"column":23,"nodeType":"151","messageId":"152","endLine":7,"endColumn":29},{"ruleId":"149","severity":1,"message":"195","line":8,"column":10,"nodeType":"151","messageId":"152","endLine":8,"endColumn":24},{"ruleId":"149","severity":1,"message":"182","line":13,"column":13,"nodeType":"151","messageId":"152","endLine":13,"endColumn":15},{"ruleId":"149","severity":1,"message":"173","line":13,"column":17,"nodeType":"151","messageId":"152","endLine":13,"endColumn":22},{"ruleId":"149","severity":1,"message":"196","line":14,"column":11,"nodeType":"151","messageId":"152","endLine":14,"endColumn":16},{"ruleId":"153","replacedBy":"197"},{"ruleId":"155","replacedBy":"198"},"@typescript-eslint/no-unused-vars","'ColorModeSwitcher' is defined but never used.","Identifier","unusedVar","no-native-reassign",["199"],"no-negated-in-lhs",["200"],"'getDefaultMiddleware' is defined but never used.","'BrowserRouter' is defined but never used.","'Router' is defined but never used.","'history' is assigned a value but never used.","'PayloadAction' is defined but never used.","'stat' is defined but never used.","'isEmpty' is defined but never used.","'isNil' is defined but never used.","'assert' is defined but never used.","'todoApi' is defined but never used.","'LoginState' is defined but never used.","'SliceState' is defined but never used.","'createEntityAdapter' is defined but never used.","'TaskData' is defined but never used.","'TaskSuccess' is defined but never used.","'React' is defined but never used.","'color' is assigned a value but never used.","'heading' is assigned a value but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userDetail'. Either include it or remove the dependency array.","ArrayExpression",["201"],"React Hook useEffect has a missing dependency: 'push'. Either include it or remove the dependency array.",["202"],"'bg' is assigned a value but never used.","'isUpdating' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTask'. Either include it or remove the dependency array.",["203"],"'useEffect' is defined but never used.","'Grid' is defined but never used.","'GridItem' is defined but never used.","'List' is defined but never used.","'ListIcon' is defined but never used.","'ListItem' is defined but never used.","'useHistory' is defined but never used.","'loginApi' is defined but never used.","'logout' is defined but never used.","'useAppDispatch' is defined but never used.","'token' is assigned a value but never used.",["199"],["200"],"no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [token, userDetail]",{"range":"210","text":"211"},"Update the dependencies array to be: [push, token]",{"range":"212","text":"213"},"Update the dependencies array to be: [getTask, token]",{"range":"214","text":"215"},[939,946],"[token, userDetail]",[1007,1014],"[push, token]",[956,963],"[getTask, token]"]